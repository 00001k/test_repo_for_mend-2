#!/usr/bin/env node

const appFactory = require('../app');
const debug = require('debug')('api:server');
const http = require('http');
const { port, mongoUrl } = require('../config');

const MongoClient = require("mongodb").MongoClient; // Driver for connecting to MongoDB

MongoClient.connect(mongoUrl, (err, mongoClient) => {
  if (err) {
    logger.error("Error: DB: connect");
    logger.error(err);
    process.exit(1);
  }

  const app = appFactory(mongoClient.db());
app.set('port', port);

const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
  server.on('listening', () => onListening(server));
})


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = `${typeof port === 'string' ? 'Pipe' : 'Port'} ${port}`; 

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug(`Listening on ${bind}`);
}
